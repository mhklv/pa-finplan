package org.mchklv.finplan.common;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.regex.Pattern;


/**
 * TODO: Write description.
 *
 */
public class FixedPointDec implements Serializable {
	private static final long serialVersionUID = -5667414842674421324L;
	private static final int SCALE = 2;
    private static final char DEC_SEP = ',';
    private static final String DEC_REGEX = "[0-9]*" + DEC_SEP + "[0-9]{1,2}|[0-9]+";
    private static final Pattern DEC_PATTERN = Pattern.compile(DEC_REGEX);
    private static final BigInteger ONE_HUNDRED = new BigInteger("100");
    
    
    private BigInteger scaledVal;

    
    public FixedPointDec() {
        scaledVal = new BigInteger("0");
    }

    public FixedPointDec(String decStr) throws NumberFormatException {
        scaledVal = scaleDec(decStr);
    }

    public FixedPointDec(FixedPointDec otherFixedPointDec) {
        scaledVal = otherFixedPointDec.scaledVal.add(BigInteger.ZERO);
    }


    public void add(FixedPointDec rhsFixedPointDec) {
        scaledVal = scaledVal.add(rhsFixedPointDec.scaledVal);
    }

    public void subtract(FixedPointDec rhsFixedPointDec) {
        scaledVal = scaledVal.subtract(rhsFixedPointDec.scaledVal);
    }
    
    public void multiply(FixedPointDec rhsFixedPointDec) {
        scaledVal = scaledVal.multiply(rhsFixedPointDec.scaledVal).divide(ONE_HUNDRED);
    }
    
    public void divide(FixedPointDec rhsFixedPointDec) throws ArithmeticException {
        scaledVal = scaledVal.multiply(ONE_HUNDRED).divide(rhsFixedPointDec.scaledVal);
    }

    
    public FixedPointDec added(FixedPointDec rhsFixedPointDec) {
        FixedPointDec newFixedPointDec = new FixedPointDec(this);
        newFixedPointDec.add(rhsFixedPointDec);
        return newFixedPointDec;
    }

    public FixedPointDec subtracted(FixedPointDec rhsFixedPointDec) {
        FixedPointDec newFixedPointDec = new FixedPointDec(this);
        newFixedPointDec.subtract(rhsFixedPointDec);
        return newFixedPointDec;
    }

    public FixedPointDec multiplied(FixedPointDec rhsFixedPointDec) {
        FixedPointDec newFixedPointDec = new FixedPointDec(this);
        newFixedPointDec.multiply(rhsFixedPointDec);
        return newFixedPointDec;
    }
    
    public FixedPointDec divided(FixedPointDec rhsFixedPointDec) throws ArithmeticException {
        FixedPointDec newFixedPointDec = new FixedPointDec(this);
        newFixedPointDec.divide(rhsFixedPointDec);
        return newFixedPointDec;
    }

    
    public static boolean isValidDec(String str) {
        if (str == null) {
            return false;
        }
        
        return DEC_PATTERN.matcher(str).matches();
    }

    
    public double doubleValue() {
        BigInteger decimalPart = scaledVal.divide(ONE_HUNDRED);
        BigInteger fractionalPart = scaledVal.remainder(ONE_HUNDRED);

        return decimalPart.doubleValue() + fractionalPart.doubleValue() / 100.0;
    }
    

    private String extractDigits(String decStr) {
        StringBuilder strBuilder = new StringBuilder();

        for (int i = 0; i < decStr.length(); ++i) {
            if (Character.isDigit(decStr.charAt(i))) {
                strBuilder.append(decStr.charAt(i));
            }
        }

        return strBuilder.toString();
    }

    private BigInteger scaleDec(String decStr) throws NumberFormatException {
        if (decStr == null || decStr.isEmpty()) {
            return new BigInteger("0");
        }
        else if (!isValidDec(decStr)) {
            throw new NumberFormatException("Failed to convert String to FixedPointDec.");
        }
        
        int sepIndex = decStr.length() - decStr.indexOf(DEC_SEP);
        BigInteger scaledInteger;
        
        if (sepIndex == decStr.length() + 1) {
            scaledInteger = new BigInteger(extractDigits(decStr)).multiply(ONE_HUNDRED);
        }
        else if (sepIndex == 2) {
            scaledInteger = new BigInteger(extractDigits(decStr)).multiply(BigInteger.TEN);
        }
        else if (sepIndex == 3) {
            scaledInteger = new BigInteger(extractDigits(decStr));
        }
        else {
            // Should never be thrown.
            throw new NumberFormatException("Failed to convert String to FixedPointDec.");
        }
        
        return scaledInteger;
    }
    

    // Autogenerated
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((scaledVal == null) ? 0 : scaledVal.hashCode());
        return result;
    }

    // Autogenerated
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        FixedPointDec other = (FixedPointDec) obj;
        if (scaledVal == null) {
            if (other.scaledVal != null)
                return false;
        } else if (!scaledVal.equals(other.scaledVal))
            return false;
        return true;
    }

    @Override
    public String toString() {
        StringBuilder strBuilder = new StringBuilder(scaledVal.toString());

        int len = strBuilder.length();
        
        for (int i = 3; i > len; --i) {
            strBuilder.insert(0, '0');
        }

        strBuilder.insert(strBuilder.length() - 2, DEC_SEP);
        
        return strBuilder.toString();
    }
}
